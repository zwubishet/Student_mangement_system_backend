generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  DIRECTOR
}

model User {
  id         String   @id @default(cuid())
  fullName   String
  password   String
  role       Role
  refreshToken    RefreshToken[]
  createdAt  DateTime @default(now())
  student    Student?
  teacher    Teacher?
  director   Director?
}


model Student {
  userId     String   @id
  user       User     @relation(fields: [userId], references: [id])
  studentId  String   
  gradeSectionId String?
  gradeSection   GradeSection?  @relation(fields: [gradeSectionId], references: [id])
  grades         StudentGrade[]
  communityPosts   CommunityPost[]
  comments        Comment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model RefreshToken {
  id       String   @id @default(cuid())
  token    String   @unique
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


model Teacher {
  userId   String   @id
  teacherId  String  @unique
  user     User     @relation(fields: [userId], references: [id])
  subject  String
  // ...more teacher-specific fields
}

model Director {
  userId   String   @id
  directorId  String  @unique
  user     User     @relation(fields: [userId], references: [id])
  office   String
  // ...more director-specific fields
}

model StudentGrade {
  id              String         @id @default(uuid())
  student         Student        @relation(fields: [studentId], references: [userId])
  studentId       String
  year            Int
  semester        Int
  totalScore      Float
  averageScore    Float
  rank            Int
  subjectResults  SubjectResult[]
  createdAt       DateTime       @default(now())
}

model SubjectResult {
  id            String       @id @default(uuid())
  studentGrade  StudentGrade @relation(fields: [studentGradeId], references: [id])
  studentGradeId String
  subjectName   String
  test1         Float
  test2         Float
  test3         Float
  assignment    Float
  finalExam     Float
  total         Float
}


model GradeSection {
  id            String         @id @default(uuid()) // Unique ID for each grade-section
  grade         String 
  section       String 
  students      Student[] // One GradeSection has many students
  schedules     Schedule[] // One GradeSection has many schedules (JSON schedules)
  announcements Announcement[]

  @@unique([grade, section], name: "grade_section_unique") // Ensure no duplicate grade-section combos
}

model Schedule {
  id             String       @id @default(uuid())
  weekSchedule   Json
  gradeSection   GradeSection @relation(fields: [gradeSectionId], references: [id])
  gradeSectionId String       @unique
}

model Resource {
  id           String   @id @default(cuid())
  title        String
  description  String?
  resourceType String // video, link, pdf, etc.
  link         String? // Can store a URL for video, link
  file         String? // Path to uploaded file
  createdAt    DateTime @default(now())
}

model Announcement {
  id        String        @id @default(uuid())
  title     String
  message   String
  createdAt DateTime      @default(now())
  isPublic  Boolean       @default(true) // true = for all, false = for grade only
  gradeId   String? // null if public
  grade     GradeSection? @relation(fields: [gradeId], references: [id])
}


model CommunityPost {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      String   // e.g. "General", "Grade 7", "Grade 6"
  image     String?  // optional: can store image URL or path
  document  String?  // optional: document URL/path (e.g., PDF)
  createdAt DateTime @default(now())
  comments   Comment[]
  student   Student  @relation(fields: [studentId], references: [userId])
  studentId String
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  createdAt     DateTime @default(now())
  post          CommunityPost @relation(fields: [postId], references: [id])
  postId        String
  student       Student @relation(fields: [studentId], references: [userId])
  studentId     String
}

