generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id             String         @id @default(uuid())
  studentId      String         @unique
  fullName       String
  passwordHash   String
  gradeSectionId String?
  gradeSection   GradeSection?  @relation(fields: [gradeSectionId], references: [id])
  grades         StudentGrade[]
  communityPosts   CommunityPost[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model StudentGrade {
  id              String         @id @default(uuid())
  student         Student        @relation(fields: [studentId], references: [id])
  studentId       String
  year            Int
  semester        Int
  totalScore      Float
  averageScore    Float
  rank            Int
  subjectResults  SubjectResult[]
  createdAt       DateTime       @default(now())
}

model SubjectResult {
  id            String       @id @default(uuid())
  studentGrade  StudentGrade @relation(fields: [studentGradeId], references: [id])
  studentGradeId String
  subjectName   String
  test1         Float
  test2         Float
  test3         Float
  assignment    Float
  finalExam     Float
  total         Float
}


model GradeSection {
  id            String         @id @default(uuid()) // Unique ID for each grade-section
  grade         String 
  section       String 
  students      Student[] // One GradeSection has many students
  schedules     Schedule[] // One GradeSection has many schedules (JSON schedules)
  announcements Announcement[]

  @@unique([grade, section]) // Ensure no duplicate grade-section combos
}

model Schedule {
  id             String       @id @default(uuid())
  weekSchedule   Json
  gradeSection   GradeSection @relation(fields: [gradeSectionId], references: [id])
  gradeSectionId String       @unique
}

model Resource {
  id           String   @id @default(cuid())
  title        String
  description  String?
  resourceType String // video, link, pdf, etc.
  link         String? // Can store a URL for video, link
  file         String? // Path to uploaded file
  createdAt    DateTime @default(now())
}

model Announcement {
  id        String        @id @default(uuid())
  title     String
  message   String
  createdAt DateTime      @default(now())
  isPublic  Boolean       @default(true) // true = for all, false = for grade only
  gradeId   String? // null if public
  grade     GradeSection? @relation(fields: [gradeId], references: [id])
}


model CommunityPost {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      String   // e.g. "General", "Grade 7", "Grade 6"
  image     String?  // optional: can store image URL or path
  document  String?  // optional: document URL/path (e.g., PDF)
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
}
